@page "/jt809"

@using JT809.Protocol;
@using JT809.Protocol.Extensions;
@using Newtonsoft.Json;
@using JT809.Protocol.Configs;
@using JT809.Protocol.Interfaces;
@inject IJT809Config  Config

<select class="form-control" @onchange="@OnSelectEncryptType">
    <option value="none">未加密</option>
    <option value="encrypt">加密</option>
</select>

@if (encryptType == "encrypt")
{
    <div class="form-group">
        <input type="text" class="form-control" placeholder="M1" @bind="EncryptOptions.M1">
        <input type="text" class="form-control" placeholder="IA1" @bind="EncryptOptions.IA1">
        <input type="text" class="form-control" placeholder="IC1" @bind="EncryptOptions.IC1">
    </div>
}
<button class="btn btn-primary" @onclick="Query">解析</button>
<BSAlert Color="Color.Danger" IsOpen="@isOpen" IsDismissible="true" OnDismiss="@OnDismiss">
    @ErrerMessage
</BSAlert>
<div class="right">
    <textarea class="form-control" @bind="HexData" rows="10"></textarea>
    <pre>
         @Json
    </pre>
</div>

@code {
    private JT809Serializer Serializer;

    private string HexData = "5B 00 00 00 92 00 00 06 82 94 00 01 33 EF B8 01 00 00 00 00 00 27 0F D4 C1 41 31 32 33 34 35 00 00 00 00 00 00 00 00 00 00 00 00 00 02 94 01 00 00 00 5C 01 00 02 00 00 00 00 5A 01 AC 3F 40 12 3F FA A1 00 00 00 00 5A 01 AC 4D 50 03 73 6D 61 6C 6C 63 68 69 00 00 00 00 00 00 00 00 31 32 33 34 35 36 37 38 39 30 31 00 00 00 00 00 00 00 00 00 31 32 33 34 35 36 40 71 71 2E 63 6F 6D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 BA D8 5D";

    private string Json;

    string encryptType = "none";

    JT809EncryptOptions EncryptOptions;

    private string ErrerMessage;

    private bool isOpen = false;

    void OnDismiss()
    {
        isOpen = !isOpen;
        StateHasChanged();
    }

    private void OnSelectEncryptType(ChangeEventArgs e)
    {
        encryptType = e.Value.ToString();
    }

    protected override void OnInitialized()
    {
        Serializer = Config.GetSerializer();
        EncryptOptions = new JT809EncryptOptions();
    }

    private void Query()
    {
        try
        {
            isOpen = false;
            var data = HexData.ToHexBytes();
            if (encryptType == "none")
            {
                Json = JsonConvert.SerializeObject(Serializer.Deserialize(data), Formatting.Indented);
            }
            else
            {
                IJT809Config jt809ConfigInternal = new JT809Config(Guid.NewGuid().ToString());
                jt809ConfigInternal.EncryptOptions = EncryptOptions;
                JT809Serializer jT809SerializerInternal = new JT809Serializer(jt809ConfigInternal);
                Json = JsonConvert.SerializeObject(jT809SerializerInternal.Deserialize(data), Formatting.Indented);
            }
        }
        catch(Exception ex)
        {
            isOpen = !isOpen;
            Json = "";
            ErrerMessage = ex.StackTrace;
        }
    }

    class JT809Config : JT809GlobalConfigBase
    {
        public JT809Config(string configId)
        {
            ConfigId = configId;
        }

        public override string ConfigId { get; }
    }
}
